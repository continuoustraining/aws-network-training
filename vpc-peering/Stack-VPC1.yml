AWSTemplateFormatVersion: 2010-09-09
Description: Deploy VPC Network 1

Parameters:
  InstanceTypeParameter:
    Type: String
    Default: t2.micro
    Description: Enter t2.micro, m1.small, or m1.large. Default is t2.micro.
  KeyPairParameter:
    Type: String
    Default: fortinet-workshop-troubleshooting
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the web server"

Mappings:
  RegionMap:
    # North Virginia
    us-east-1:
      linux2: "ami-0cc96feef8c6bbff3"
    # Ohio
    us-east-2:
      linux2: "ami-0d8f6eb4f641ef691"
    # California
    us-west-1:
      linux2: "ami-056ee704806822732"
    # Oregon
    us-west-2:
      linux2: "ami-082b5a644766e0e6f"
    # Mumbai
    ap-south-1:
      linux2: "ami-0d2692b6acea72ee6"
    # Seoul
    ap-northeast-2:
      linux2: "ami-095ca789e0549777d"
    # Singapore
    ap-southeast-1:
      linux2: "ami-01f7527546b557442"
    # Sydney
    ap-southeast-2:
      linux2: "ami-0dc96254d5535925f"
    # Tokyo
    ap-northeast-1:
      linux2: "ami-0c3fd0f5d33134a76"
    # Frankfurt
    eu-central-1:
      linux2: "ami-0cc293023f983ed53"
    # Ireland
    eu-west-1:
      linux2: "ami-0bbc25e23a7640b9b"
    # London
    eu-west-2:
      linux2: "ami-0d8e27447ec2c8410"
    # Paris
    eu-west-3:
      linux2: "ami-0adcddd3324248c4c"
    # Stockholm
    eu-north-1:
      linux2: "ami-3f36be41"
    # Sao Paulo
    sa-east-1:
      linux2: "ami-058943e7d9b9cabfb"

Resources:
  VPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: VPC-1

  InternetGateway1:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: IGW-1

  AttachGateway1:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC1
      InternetGatewayId: !Ref InternetGateway1

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      CidrBlock: 10.1.0.0/24
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: Public-Subnet-1

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      CidrBlock: 10.1.1.0/24
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: Private-Subnet-1

  NaclPublic1:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC1
      Tags:
      - Key: Name
        Value: NACL-Public-1

  NaclEntryPublicSshInbound1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NaclPublic1
      RuleNumber: '102'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"
      PortRange:
        From: '22'
        To: '22'

  NaclEntryPublicCustomTcpInbound1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NaclPublic1
      RuleNumber: '103'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"
      PortRange:
        From: '1024'
        To: '65535'

  NaclEntryPublicAllIcmpInbound1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NaclPublic1
      RuleNumber: '104'
      Protocol: "1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"

  NaclEntryPublicAllTcpOutbound1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NaclPublic1
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"
      PortRange:
        From: '0'
        To: '65535'

  NaclEntryPublicAllIcmpOutbound1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NaclPublic1
      RuleNumber: '101'
      Protocol: "1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"

  PublicSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      NetworkAclId:
        Ref: NaclPublic1

  NaclPrivate1:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC1
      Tags:
      - Key: Name
        Value: NACL-Private-1

  PrivateSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      NetworkAclId:
        Ref: NaclPrivate1

  SecurityGroupIngressEgress1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Limits security group Ingress traffic
      SecurityGroupIngress:
      - IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        FromPort: 22
        ToPort: 22
      - IpProtocol: icmp
        CidrIp: 0.0.0.0/0
        FromPort: "-1"
        ToPort: "-1"
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: "-1"
      VpcId:
        Ref: VPC1
      Tags:
          - Key: Name
            Value: Public-SG-1

  SecurityGroupIngressEgress2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Limits security group Ingress traffic
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: "-1"
      VpcId:
        Ref: VPC1
      Tags:
          - Key: Name
            Value: Private-SG-1

  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway1 #GatewayToInternet
    Properties:
      RouteTableId:
        Ref: RouteTablePublic1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway1

  RouteTablePublic1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC1
      Tags:
      - Key: Name
        Value: Public-Route-Table-1

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: RouteTablePublic1

  RouteTablePrivate1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC1
      Tags:
      - Key: Name
        Value: Private-Route-Table-1

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: RouteTablePrivate1

  Ec2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        Ref: InstanceTypeParameter
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", linux2]
      KeyName:
        Ref: KeyPairParameter
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: SecurityGroupIngressEgress1
          SubnetId:
            Ref: PublicSubnet1
      Tags:
      - Key: Name
        Value: Public-Instance-1

Outputs:
  VPC1:
    Description: VPC Network 1
    Value: !Ref VPC1
  PublicSubnet1:
    Description: Public Subnet 1
    Value: !Ref PublicSubnet1
  PrivateSubnet1:
    Description: Public Subnet 1
    Value: !Ref PublicSubnet1

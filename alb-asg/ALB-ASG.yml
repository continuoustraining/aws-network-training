AWSTemplateFormatVersion: 2010-09-09
Description: Deploy Network resources for ASG and ALB Workshop

Parameters:
  InstanceTypeParameter: 
    Type: String
    Default: t2.micro
    Description: Enter t2.micro, m1.small, or m1.large. Default is t2.micro.
  EnvironmentType: 
    Description: The environment type
    Type: String
    Default: test
    AllowedValues: 
      - prod
      - test
    ConstraintDescription: must be a prod or test

Mappings: 
  RegionMap: 
    us-east-1: 
      test: "ami-0cc96feef8c6bbff3"

Resources:
  VPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: VPC-1

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: IGW-1

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC1
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet11:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: 'us-east-1a'
      Tags:
        - Key: Name
          Value: Public-Subnet-1
  
  PublicSubnet12:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: 'us-east-1b'
      Tags:
        - Key: Name
          Value: Public-Subnet-2

  PublicSubnet13:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: 'us-east-1c'
      Tags:
        - Key: Name
          Value: Public-Subnet-3

  NaclPublic:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC1
      Tags:
      - Key: Name
        Value: NACL-Public-1

  NaclEntryPublicHttpInbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: 
        Ref: NaclPublic
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"
      PortRange:
        From: '80'
        To: '80'

  NaclEntryPublicHttpsInbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: 
        Ref: NaclPublic
      RuleNumber: '101'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"
      PortRange:
        From: '443'
        To: '443'

  NaclEntryPublicSshInbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: 
        Ref: NaclPublic
      RuleNumber: '102'
      Protocol: "1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"
      PortRange:
        From: '22'
        To: '22'

  NaclEntryPublicCustomTcpInbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: 
        Ref: NaclPublic
      RuleNumber: '103'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"
      PortRange:
        From: '1024'
        To: '65535'

  PublicSubnetNetworkAclAssociationSubnet1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet11
      NetworkAclId:
        Ref: NaclPublic

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC1
    Properties:
      GroupDescription: Limits security group Ingress traffic
      VpcId: !Ref VPC1
      Tags:
      - Key: Name
        Value: Security-Group-1

  SecurityGroupIngressSsh:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: SecurityGroup
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0
      FromPort: 22
      ToPort: 22

  SecurityGroupIngressHttpSecurityGroupsSrouce:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: SecurityGroup
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref SecurityGroup

  SecurityGroupIngressHttp:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: SecurityGroup
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0
      FromPort: 80
      ToPort: 80

  SecurityGroupIngressHttps:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: SecurityGroup
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0
      FromPort: 443
      ToPort: 443


  SecurityGroupIngressIcmp:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: SecurityGroup
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: icmp
      CidrIp: 0.0.0.0/0
      FromPort: "-1"
      ToPort: "-1"

  Route:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId:
        Ref: RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC1
      Tags:
      - Key: Name
        Value: Public-Route-Table

  PublicSubnetRouteTableAssociationSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet11
      RouteTableId:
        Ref: RouteTablePublic

  PublicSubnetRouteTableAssociationSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet12
      RouteTableId:
        Ref: RouteTablePublic

  PublicSubnetRouteTableAssociationSubnet3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet13
      RouteTableId:
        Ref: RouteTablePublic


Outputs:
  VPC1:
    Description: VPC 1
    Value: !Ref VPC1
  PublicSubnet11:
    Description: Public Subnet
    Value: !Ref PublicSubnet11
